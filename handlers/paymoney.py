from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from misc import dp, bot
import requests
import json
from random import randint
import asyncio
from .sqlit import channeg_money

QIWI_TOKEN = '2e9791d19c6b4d0dc3bbb84b670dceb0'
QIWI_ACCOUNT = '+79151297933'

@dp.callback_query_handler(text='pay_money')  # –û–ø–ª–∞—Ç–∞
async def profile(call: types.callback_query):
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN
    parameters = {'rows': '50'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + QIWI_ACCOUNT + '/payments', params=parameters)
    req = json.loads(h.text)

    random_code = randint(0, 999999999)


    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='proverka_balans')
    bat_b = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena_balans')
    markup.add(bat_a,bat_b)
    await bot.edit_message_text(chat_id=call.message.chat.id,message_id=call.message.message_id, text=
                    '‚ö†Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n'
                    'ü•ù –û–ø–ª–∞—Ç–∞ –∫–∏–≤–∏:\n\n'
                    'üëâ –ù–æ–º–µ—Ä  +79151297933\n'
                    f'üëâ –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π {random_code}\n'
                    'üëâ –°—É–º–º–∞  –æ—Ç 1 –¥–æ 15000 —Ä—É–±–ª–µ–π',reply_markup=markup)





@dp.callback_query_handler(text='proverka_balans')  #–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
async def proverka_balans(call: types.callback_query):
    text = call.message.text
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN
    parameters = {'rows': '50'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + QIWI_ACCOUNT + '/payments', params=parameters)
    req = json.loads(h.text)
    summa = 0
    a = 0
    for i in range(len(req['data'])):
            if (str(req['data'][i]['comment']) in text) and (len(str(req['data'][i]['comment']))>3):
                try:
                    int((str(req['data'][i]['comment'])))
                    summa = req['data'][i]['sum']['amount']
                    await bot.send_message(call.message.chat.id, '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞. –ñ–º–∏ /start')
                    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
                    a = 1
                except: pass

            else:
                pass
    if a == 0:
        mes = await bot.send_message(call.message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        await asyncio.sleep(10)
        await bot.delete_message(chat_id=call.message.chat.id,message_id=mes.message_id)

    if a == 1:
        channeg_money(call.message.chat.id,summa)





@dp.callback_query_handler(text='otmena_balans')  # –û—Ç–º–µ–Ω–∞
async def otmena_balans(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='üí∞ –ö–æ—à–µ–ª—å–∫–∏', callback_data='walled')
    bat_b = types.InlineKeyboardButton(text='üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='pay_money')
    bat_c = types.InlineKeyboardButton(text='üë• –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    bat_d = types.InlineKeyboardButton(text='‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info')
    markup.add(bat_a, bat_b)
    markup.row(bat_c, bat_d)
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                text='üòé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞', reply_markup=markup)